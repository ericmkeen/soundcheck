% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Spectrogram.R
\name{Spectrogram}
\alias{Spectrogram}
\title{Core spectrogram function for \code{soundcheck}}
\usage{
Spectrogram(
  Audio,
  SamplingFrequency = NULL,
  WindowLength = 5,
  FrequencyResolution = 4,
  TimeStepSize = NULL,
  nTimeSteps = NULL,
  Preemphasis = TRUE,
  DynamicRange = 70,
  Omit0Frequency = FALSE,
  WindowType = "kaiser",
  WindowParameter = NULL,
  plot = TRUE,
  PlotFast = TRUE,
  add = FALSE,
  col = NULL,
  xlim = NULL,
  ylim = NULL,
  main = "",
  xlab = "Time (ms)",
  ylab = "Frequency (Hz)"
)
}
\arguments{
\item{Audio}{An object of class 'Wave', created with the \code{readWave()} function from the package \code{tuneR}.
You can also set 'Audio' to be a numeric vector (representing a sequence of samples taken from a sound wave)
if and only if the SamplingFrequency argument is specified (i.e. not NULL).}

\item{SamplingFrequency}{The sampling frequency/rate of the sound in Hertz.
(Note that setting 'Audio' to be a 2-row or 2-column matrix (representing the two channels in a stereo soundfile) is currently unsupported.)
Only necessary to specify if \code{Audio} is of class \code{numeric}; if it is of any other class, this is ignored (hence does not need to be specified).}

\item{WindowLength}{The desired length (in milliseconds) of the analysis window used to create the spectrogram
The default is 5 milliseconds in spectrogram() from package 'phonTools'}

\item{FrequencyResolution}{Set this to any positive integer, with higher numbers mean better resolution.
Specifically, for any integer X provided, 1/X the analysis bandwidth (as determined by the number of samples in the analysis window) will be used.
Note that this greatly impacts the processing time, so adjust with care!}

\item{TimeStepSize}{Number of milliseconds that the window will be moved for each adjacent analysis}

\item{nTimeSteps}{The overall total number of time steps
If both of the above are left at NULL, nTimeSteps=400 will be used.
Note that also this greatly impacts the processing time, so adjust with care!}

\item{Preemphasis}{Should pre-emphasis be applied (to all frequency regions, i.e. with a dummy frequency cutoff of 0)?
In other words, should the spectral slope at all frequencies increase by 6 dB per octave using a single-pole filter?
This affects both the underlying spectrogram matrix as well as the plot thereof.}

\item{DynamicRange}{Values less than this many dB below the maximum are 'clipped' to that value.
If this is set to NULL, no such clipping occurs.
This affects both the underlying spectrogram matrix as well as the plot thereof.}

\item{Omit0Frequency}{The frequency band at 0 Hz is usually at very low values (e.g. -400 to -300 dB).
Select TRUE to omit this frequency band from the resulting spectrogram (both the matrix and the plot thereof).}

\item{WindowType}{A character string indicating the desired type of window function to be applied to the signal
All of the following types are supported: "rectangular" / "square", "blackman", "hann" / "hanning" (i.e. sine-squared), "hamming" (i.e. raised sine-squared),
"cosine" / "sine", "bartlett", "gaussian", "kaiser", (Note that all names are in lowercase.)}

\item{WindowParameter}{This is only relevant if the WindowType is set to "gaussian" or "kaiser"; it will be ignored in all other cases
For those two kinds of window function, this specifies the relevant parameter behind the gaussian/kaiser function.
If 'WindowParameter' is set to NULL for these two window types, the following defaults will be used:
kaiser: 3 (not 2!); gaussian: 0.4}

\item{plot}{Whether the spectrogram should be plotted or not.
If FALSE, no spectrogram is plotted, and instead, a matrix is returned containing the magnitude at each bin center.
The column names of this matrix correspond to time, and the row names correspond to frequency.
Note that both are fully unrounded numbers stored as a character string (e.g. "115.532879818594").}

\item{PlotFast}{If set to FALSE, the filled.contour() function will be used. This produces much better looking graphics (which is best for putting into publications), but takes considerably longer to plot.
If set to TRUE (the default), the image() function will be used instead, with 'useRaster' set to TRUE. This makes the plotting very fast, which is optimal for when one is dynamically exploring/interacting with the signal.
(This may not work properly if raster graphics are not supported on your device. See help("image") for details.)}

\item{add}{This determines whether an entirely new plot is drawn (with all the annotation) or whether just the core image is drawn
Careful - this should only be set to TRUE if a spectrogram has already been drawn (and therefore a graphics device / window is already open.
Note: If 'add' is set to TRUE, the coordinate system of the pre-existing plot will be used; hence, any specifications of xlim and ylim will be ignored for the subsequent call to Spectrogram(..., add=TRUE).}

\item{col}{At present, you can use this argument in four ways:
(1) If you leave this at NULL, the color map will be DarkBlue-Blue-Cyan-Yellow-Orange-Red-Brown
(2) If you set this to "alternate", the color map will be Black-Red-Orange-Yellow-White
(3) You can also set this to "greyscale"/"grayscale" to have things mapped onto a continuum from black to white.
(4) Finally, you can also provide a custom vector of colors to use.}

\item{xlim}{If left NULL, this will be set to the full time range of the soundfile}

\item{ylim}{If left NULL, this will go from 0 to the soundfile's Nyquist frequency. Note that Praat and phonTools default to 5000 Hz. (Avoiding a fixed arbitrary number makes the user think more carefully about what they are zooming into.)}

\item{main}{Main title of spectrogram.}

\item{xlab}{X-axis label.}

\item{ylab}{Y-axis label.}
}
\value{
If \code{plot=TRUE}, a spectrogram will be displayed in the plot pane. If \code{FALSE}, a matrix will be returned (see details in \code{plot} argument documentation above).
}
\description{
This function is a slight adaptation to the function developed
by Aaron Albin (\url{https://github.com/usagi5886/dsp/blob/master/Spectrogram().r}; GNU General Public License, 2015). The documentation details below are his.
}
